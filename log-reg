{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "CS 559 HW2 - 2(2).ipynb",
      "provenance": [],
      "collapsed_sections": [
        "izGQn8GXf-UJ",
        "UYKnGfXVYmTb",
        "t_QC9XfWAFxi",
        "g9ArD5CcYhEs",
        "EJec2SMHCZHi",
        "OVeNwUr9fFFb"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "izGQn8GXf-UJ"
      },
      "source": [
        "# Importing libraries, loading dataset, splitting data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "clvENBBSgADE"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import recall_score, precision_score, accuracy_score"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xHH41W7QgzL2"
      },
      "source": [
        "labels = ['ID number','clump thickness','uniformity of cell size','uniformity of cell shape','marginal adhesion','single epithelial cell size','bare nuclei','bland chromatin','normal nucleoli','mitoses','diagnosis']\n",
        "data = pd.read_csv('drive/My Drive/Stevens MSML/CS 559/breast-cancer-wisconsin.data', names=labels)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vHRtolk0JX1e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "47af6cd4-22de-4f4d-aeaa-b5d890619585"
      },
      "source": [
        "for i in range(699):\n",
        "  if data['bare nuclei'].iloc[i]=='?':\n",
        "    data['bare nuclei'].iloc[i]=np.nan"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  iloc._setitem_with_indexer(indexer, value)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZGtBeiaYuHKu"
      },
      "source": [
        "data['bare nuclei'] = data['bare nuclei'].astype('float')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1TvWPaJ2uHEd"
      },
      "source": [
        "data.replace(np.nan, round(data['bare nuclei'].mean()), inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jzW1a2bMBLyj"
      },
      "source": [
        "X_data = data.drop('diagnosis', axis=1)\n",
        "X_data = X_data.drop('ID number', axis=1)\n",
        "y_data = data['diagnosis']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0qO6xiD6xsrk"
      },
      "source": [
        "for i in X_data.columns:\n",
        "  X_data[i] = X_data[i]/(X_data[i].max()-X_data[i].min())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "728YSbInjRMW",
        "outputId": "c3f9e586-aaf4-400f-e0be-1805b4423981"
      },
      "source": [
        "for i in range(y_data.shape[0]):\n",
        "  if y_data[i]==4:\n",
        "    y_data.iloc[i]=1\n",
        "  else:\n",
        "    y_data.iloc[i]=0"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  iloc._setitem_with_indexer(indexer, value)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yup5Km3V4ZKs"
      },
      "source": [
        "x_train, x_test, Y_train, Y_test = train_test_split(X_data, y_data, test_size=0.2, random_state=42, shuffle=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sxTsg1ev2sXT"
      },
      "source": [
        "X_train, X_cv, y_train, y_cv = train_test_split(x_train, Y_train, test_size=0.2, random_state=42, shuffle=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UYKnGfXVYmTb"
      },
      "source": [
        "# Stochastic Gradient Descent"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3hX6z5WzDuAW"
      },
      "source": [
        "def sgd(epochs, X_train, y_train, w, b, learning_rate):\n",
        "  for i in range(epochs):\n",
        "    ind = np.random.choice(X_train.index, size=1)\n",
        "    ind = int(ind)\n",
        "    X_tr = np.array(X_train[X_train.index==ind])\n",
        "    y_tr = y_train[ind].copy()\n",
        "    z = (np.dot(X_tr, w.T) + b)\n",
        "    fx = 1/(1+np.exp(-z))\n",
        "    grad_w = 2*X_tr*(fx-y_tr)\n",
        "    grad_b = 2*(fx-y_tr)\n",
        "\n",
        "    w = w - grad_w*learning_rate\n",
        "    b = b - grad_b*learning_rate\n",
        "\n",
        "  return w,b\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ENd0Z_NI_m_c"
      },
      "source": [
        "def prediction(X,w,b):\n",
        "  y_pred=[]\n",
        "  for i in range(X.shape[0]):\n",
        "    X_t = np.array(X.iloc[i,:])\n",
        "    fx = 1/(1+np.exp(-(np.dot(X_t, w.T) + b)))\n",
        "    if fx>=0.5:\n",
        "      y_p = 1\n",
        "    else:\n",
        "      y_p = 0\n",
        "    y_pred.append(y_p)\n",
        "  return y_pred"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t_QC9XfWAFxi"
      },
      "source": [
        "## Random initialization of parameters"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hyZiV9f0Ar4g"
      },
      "source": [
        "w = np.zeros((X_train.shape[1]))\n",
        "b = 0"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6UT0bvWHaCFZ",
        "outputId": "7a7fda0e-d9be-4715-de5f-5bfc1e38bffa"
      },
      "source": [
        "wsgd_rand,bsgd_rand = sgd(1000, X_train, y_train, w, b, 0.1)\n",
        "print(wsgd_rand,bsgd_rand)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1.45856631 1.91263056 2.06913082 1.08371097 0.44650889 2.51413638\n",
            "  1.23670227 1.63939904 0.41659262]] [[-5.6272006]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XlOKVV79E1aC"
      },
      "source": [
        "y_pred_sgd_rand = prediction(X_cv, wsgd_rand, bsgd_rand)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CaLsFM3RAp9u"
      },
      "source": [
        "recall_sgd_rand = recall_score(y_cv, y_pred_sgd_rand)\n",
        "prec_sgd_rand = precision_score(y_cv, y_pred_sgd_rand)\n",
        "acc_sgd_rand = accuracy_score(y_cv, y_pred_sgd_rand)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RZ0inlFIA-6H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36c302ca-cce2-4724-f79e-ac55abf6e06f"
      },
      "source": [
        "print(acc_sgd_rand)\n",
        "print(prec_sgd_rand)\n",
        "print(recall_sgd_rand)\n",
        "\n",
        "sgd_rand = [recall_sgd_rand, prec_sgd_rand, acc_sgd_rand]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9553571428571429\n",
            "0.9487179487179487\n",
            "0.925\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CYYMUaCHB-8r"
      },
      "source": [
        "## Cross validation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ie5hK4QwvvGj",
        "outputId": "fa62ff75-c0a4-4679-e60c-72e130a73a8c"
      },
      "source": [
        "best_rec_sgd=0\n",
        "w = np.zeros((X_train.shape[1]))\n",
        "b = 0\n",
        "\n",
        "for learning_rate in [0.001,0.1,1,10]:\n",
        "    for epochs in [100,500,1000]:\n",
        "      wcv_sgd, bcv_sgd = sgd(epochs, X_train, y_train, w, b, learning_rate)\n",
        "      ypred_sgd_test_cv = prediction(X_cv, wcv_sgd, bcv_sgd)\n",
        "      rec_score = recall_score(y_cv, ypred_sgd_test_cv)\n",
        "      print('learning rate: ',learning_rate,'\\n epochs: ',epochs,'\\n recall: ',rec_score)\n",
        "      if rec_score>best_rec_sgd:\n",
        "        best_rec_sgd=rec_score\n",
        "        best_rec_combination_sgd=(learning_rate, epochs)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "learning rate:  0.001 \n",
            " epochs:  100 \n",
            " recall:  0.875\n",
            "learning rate:  0.001 \n",
            " epochs:  500 \n",
            " recall:  1.0\n",
            "learning rate:  0.001 \n",
            " epochs:  1000 \n",
            " recall:  0.875\n",
            "learning rate:  0.1 \n",
            " epochs:  100 \n",
            " recall:  0.95\n",
            "learning rate:  0.1 \n",
            " epochs:  500 \n",
            " recall:  0.9\n",
            "learning rate:  0.1 \n",
            " epochs:  1000 \n",
            " recall:  0.95\n",
            "learning rate:  1 \n",
            " epochs:  100 \n",
            " recall:  0.975\n",
            "learning rate:  1 \n",
            " epochs:  500 \n",
            " recall:  0.95\n",
            "learning rate:  1 \n",
            " epochs:  1000 \n",
            " recall:  0.975\n",
            "learning rate:  10 \n",
            " epochs:  100 \n",
            " recall:  0.975\n",
            "learning rate:  10 \n",
            " epochs:  500 \n",
            " recall:  0.875\n",
            "learning rate:  10 \n",
            " epochs:  1000 \n",
            " recall:  0.975\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l9e3x_kp6cns",
        "outputId": "e4719af8-4522-4b60-f633-2274fee3cf69"
      },
      "source": [
        "print(best_rec_sgd)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B2SVqxVJuX3t"
      },
      "source": [
        "learning_rate = best_rec_combination_sgd[0]\n",
        "epochs = best_rec_combination_sgd[1]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7AggRaIl5F02"
      },
      "source": [
        "w = np.zeros((X_train.shape[1]))\n",
        "b = 0\n",
        "w_sgd, b_sgd = sgd(epochs, x_train, Y_train, w, b, learning_rate)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rBtACDNQ54sV"
      },
      "source": [
        "y_pred_sgd = prediction(X_cv, w_sgd, b_sgd)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OIahepyw6BkD"
      },
      "source": [
        "rec_cv_sgd = recall_score(y_cv, y_pred_sgd)\n",
        "prec_cv_sgd = precision_score(y_cv, y_pred_sgd)\n",
        "acc_cv_sgd = accuracy_score(y_cv, y_pred_sgd)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BaGCORVd6TqC",
        "outputId": "4a383660-e3ed-4723-a707-08713d73528d"
      },
      "source": [
        "print(rec_cv_sgd, prec_cv_sgd, acc_cv_sgd)\n",
        "\n",
        "sgd_cv = [rec_cv_sgd, prec_cv_sgd, acc_cv_sgd]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0 0.9523809523809523 0.9821428571428571\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g9ArD5CcYhEs"
      },
      "source": [
        "# Mini Batch"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aUO0WuAY4FHp"
      },
      "source": [
        "def get_batches(X,y,batch_size,i):\n",
        "    X_new = X.iloc[i:i+batch_size,:]\n",
        "    y_new = y[i:i+batch_size]    \n",
        "    return X_new, y_new\n",
        "\n",
        "\n",
        "# Mini-Batch Gradient Descent\n",
        "\n",
        "def MiniBatchGradientDescent(X,y,w,b,learning_rate,batch_size):\n",
        "  b = np.zeros(batch_size)\n",
        "  num_batches = int(X_train.shape[0]/batch_size)    \n",
        "  for i in range(0,num_batches):\n",
        "    X_batch, y_batch = get_batches(X_train,y_train,batch_size,i)\n",
        "    z = (np.dot(X_batch, w.T) + b)\n",
        "    fx = 1/(1+np.exp(-z))\n",
        "    loss = fx - y_batch\n",
        "    dw = 2*(np.dot(X_batch.T,loss))/batch_size\n",
        "    db = 2*loss/batch_size\n",
        "\n",
        "    w = w - learning_rate * dw\n",
        "    b = b - learning_rate * db\n",
        "    b = (b.mean())*np.ones(batch_size)\n",
        "  b = b.mean()\n",
        "  return w,b\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qNDBf3jBDDxY"
      },
      "source": [
        "## Random initialisation of parameters"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ChA3430t6pJR"
      },
      "source": [
        "b_m = [0]\n",
        "w_m = np.zeros(X_train.shape[1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dmTuMaT-5R-L"
      },
      "source": [
        "wmini_rand, bmini_rand = MiniBatchGradientDescent(X_train,y_train,w_m, b_m,0.1,20)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F52w-S2cY025",
        "outputId": "b95c86f9-3701-4cfa-8fda-3a400f76907c"
      },
      "source": [
        "print(wmini_rand, bmini_rand)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-0.11622183  0.16716895  0.12868953  0.12931402 -0.05598291  0.23018505\n",
            "  0.01034318  0.20560919 -0.06181963] -0.05701706492508023\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RiisYBBT5R8O"
      },
      "source": [
        "y_pred_mini_rand = prediction(X_cv,wmini_rand,bmini_rand)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fl_y-CKAcRaY"
      },
      "source": [
        "recall_mini_rand = recall_score(y_cv, y_pred_mini_rand)\n",
        "prec_mini_rand = precision_score(y_cv, y_pred_mini_rand)\n",
        "acc_mini_rand = accuracy_score(y_cv, y_pred_mini_rand)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2xc7EYR2cRMA",
        "outputId": "79add72b-6a7c-476d-873c-65e9941832ac"
      },
      "source": [
        "print(recall_mini_rand)\n",
        "print(prec_mini_rand)\n",
        "print(acc_mini_rand)\n",
        "\n",
        "mini_rand = [recall_mini_rand, prec_mini_rand, acc_mini_rand]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n",
            "0.5333333333333333\n",
            "0.6875\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ybVQA0tiEFwe"
      },
      "source": [
        "## Cross validation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4bHhig5P6VJT",
        "outputId": "60464123-f7bd-4c6e-d05f-bb816e562a91"
      },
      "source": [
        "best_rec_mini=0\n",
        "b_m = np.zeros(13)\n",
        "w_m = np.zeros(X_train.shape[1])\n",
        "\n",
        "for learning_rate in [0.001,0.1,1,10]:\n",
        "    for batch_size in [5,10,15,20]:\n",
        "      wcv_mini, bcv_mini = MiniBatchGradientDescent(X_train, y_train, w, b, learning_rate, batch_size)\n",
        "      ypred_mini_test_cv = prediction(X_cv, wcv_mini, bcv_mini)\n",
        "      rec_score = recall_score(y_cv, ypred_mini_test_cv)\n",
        "      print('learning rate: ',learning_rate,'\\n batch size: ',batch_size,'\\n recall: ',rec_score)\n",
        "      if rec_score>best_rec_mini:\n",
        "        best_rec_mini=rec_score\n",
        "        best_rec_combination_mini=(learning_rate, batch_size)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "learning rate:  0.001 \n",
            " batch size:  5 \n",
            " recall:  0.975\n",
            "learning rate:  0.001 \n",
            " batch size:  10 \n",
            " recall:  1.0\n",
            "learning rate:  0.001 \n",
            " batch size:  15 \n",
            " recall:  1.0\n",
            "learning rate:  0.001 \n",
            " batch size:  20 \n",
            " recall:  1.0\n",
            "learning rate:  0.1 \n",
            " batch size:  5 \n",
            " recall:  0.85\n",
            "learning rate:  0.1 \n",
            " batch size:  10 \n",
            " recall:  0.65\n",
            "learning rate:  0.1 \n",
            " batch size:  15 \n",
            " recall:  0.975\n",
            "learning rate:  0.1 \n",
            " batch size:  20 \n",
            " recall:  1.0\n",
            "learning rate:  1 \n",
            " batch size:  5 \n",
            " recall:  0.925\n",
            "learning rate:  1 \n",
            " batch size:  10 \n",
            " recall:  0.625\n",
            "learning rate:  1 \n",
            " batch size:  15 \n",
            " recall:  0.725\n",
            "learning rate:  1 \n",
            " batch size:  20 \n",
            " recall:  0.725\n",
            "learning rate:  10 \n",
            " batch size:  5 \n",
            " recall:  0.975\n",
            "learning rate:  10 \n",
            " batch size:  10 \n",
            " recall:  0.9\n",
            "learning rate:  10 \n",
            " batch size:  15 \n",
            " recall:  1.0\n",
            "learning rate:  10 \n",
            " batch size:  20 \n",
            " recall:  0.725\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZxEfixZc8GkG",
        "outputId": "a8b412c3-0574-4276-a860-139e067904d4"
      },
      "source": [
        "learning_rate = best_rec_combination_mini[0]\n",
        "batch_size = best_rec_combination_mini[1]\n",
        "print(learning_rate, batch_size)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.001 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4Ks-7mSA8UHV"
      },
      "source": [
        "b_m = [0]\n",
        "w_m = np.zeros(X_train.shape[1])\n",
        "w_mini, b_mini = MiniBatchGradientDescent(x_train, Y_train, w_m, b_m, learning_rate, batch_size)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nozOAS_a9bc7"
      },
      "source": [
        "y_pred_mini = prediction(X_cv, w_mini, b_mini)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lTvMMYrT9xd6"
      },
      "source": [
        "rec_cv_mini = recall_score(y_cv, y_pred_mini)\n",
        "prec_cv_mini = precision_score(y_cv, y_pred_mini)\n",
        "acc_cv_mini = accuracy_score(y_cv, y_pred_mini)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ImvEijEE-Gi5",
        "outputId": "76b85557-13c3-4b95-ddb1-840d812b2368"
      },
      "source": [
        "print(rec_cv_mini, prec_cv_mini, acc_cv_mini)\n",
        "mini_cv = [rec_cv_mini, prec_cv_mini, acc_cv_mini]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0 0.7017543859649122 0.8482142857142857\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EJec2SMHCZHi"
      },
      "source": [
        "# Evaluating on testing data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kcYGVM5VGYA5"
      },
      "source": [
        "## SGD"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OQuZifAHCXfz"
      },
      "source": [
        "y_pred_test_sgd = prediction(x_test, w_sgd, b_sgd)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1mg4PFz-CXf0"
      },
      "source": [
        "rec_test_sgd = recall_score(Y_test, y_pred_test_sgd)\n",
        "prec_test_sgd = precision_score(Y_test, y_pred_test_sgd)\n",
        "acc_test_sgd = accuracy_score(Y_test, y_pred_test_sgd)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2dczbKdWCXf0",
        "outputId": "62984cbe-c693-4ebb-9235-d64283196574"
      },
      "source": [
        "print(rec_test_sgd, prec_test_sgd, acc_test_sgd)\n",
        "sgd_test = [rec_test_sgd, prec_test_sgd, acc_test_sgd]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0 0.8653846153846154 0.95\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pd-YKJwGGZsA"
      },
      "source": [
        "## Mini Batch"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0oc2Ufg5GTa_"
      },
      "source": [
        "y_pred_test_mini = prediction(x_test, w_mini, b_mini)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qe0BlOspGfoJ"
      },
      "source": [
        "rec_test_mini = recall_score(Y_test, y_pred_test_mini)\n",
        "prec_test_mini = precision_score(Y_test, y_pred_test_mini)\n",
        "acc_test_mini = accuracy_score(Y_test, y_pred_test_mini)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CFmpjiirGfdA",
        "outputId": "5cb586e5-1119-4c43-b506-872d4795a584"
      },
      "source": [
        "print(rec_test_mini, prec_test_mini, acc_test_mini)\n",
        "mini_test = [rec_test_mini, prec_test_mini, acc_test_mini]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0 0.6164383561643836 0.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OVeNwUr9fFFb"
      },
      "source": [
        "# Output dataframe"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 142
        },
        "id": "10aloGv4jpVV",
        "outputId": "2e1859a0-8981-4e7f-cd75-6aafef8b84b2"
      },
      "source": [
        "sgd_output = pd.DataFrame(data = [[round(sgd_rand[i],2) for i in range(0,3)], [round(sgd_cv[i],2) for i in range(0,3)], [round(sgd_test[i],2) for i in range(0,3)]],\n",
        "                          columns = ['Recall','Precision','Accuracy'],\n",
        "                          index = ['Random initialization of parameters','After cross validation, evaluated on validation data','Evaluated on testing data'])\n",
        "sgd_output"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>Accuracy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Random initialization of parameters</th>\n",
              "      <td>0.92</td>\n",
              "      <td>0.95</td>\n",
              "      <td>0.96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>After cross validation, evaluated on validation data</th>\n",
              "      <td>1.00</td>\n",
              "      <td>0.95</td>\n",
              "      <td>0.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Evaluated on testing data</th>\n",
              "      <td>1.00</td>\n",
              "      <td>0.87</td>\n",
              "      <td>0.95</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                    Recall  Precision  Accuracy\n",
              "Random initialization of parameters                   0.92       0.95      0.96\n",
              "After cross validation, evaluated on validation...    1.00       0.95      0.98\n",
              "Evaluated on testing data                             1.00       0.87      0.95"
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 142
        },
        "id": "5ZAVeKKvkfnq",
        "outputId": "6531196d-fd51-44b8-824d-56fb31b292e3"
      },
      "source": [
        "mini_output = pd.DataFrame(data = [[round(mini_rand[i],2) for i in range(0,3)], [round(mini_cv[i],2) for i in range(0,3)], [round(mini_test[i],2) for i in range(0,3)]],\n",
        "                          columns = ['Recall','Precision','Accuracy'],\n",
        "                          index = ['Random initialization of parameters','After cross validation, evaluated on validation data','Evaluated on testing data'])\n",
        "mini_output"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>Accuracy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Random initialization of parameters</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>After cross validation, evaluated on validation data</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Evaluated on testing data</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.62</td>\n",
              "      <td>0.80</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                    Recall  Precision  Accuracy\n",
              "Random initialization of parameters                    1.0       0.53      0.69\n",
              "After cross validation, evaluated on validation...     1.0       0.70      0.85\n",
              "Evaluated on testing data                              1.0       0.62      0.80"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    }
  ]
}
